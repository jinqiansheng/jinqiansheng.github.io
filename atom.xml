<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>金乾胜</title>
  
  <subtitle>榔头，榔头，有谁看见我的榔头了？</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jinqiansheng.github.io/"/>
  <updated>2019-11-22T01:04:57.726Z</updated>
  <id>https://jinqiansheng.github.io/</id>
  
  <author>
    <name>金乾胜</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringCloud Config分布式配置中心</title>
    <link href="https://jinqiansheng.github.io/2019/11/20/SpringCloud%20Config%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    <id>https://jinqiansheng.github.io/2019/11/20/SpringCloud%20Config%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</id>
    <published>2019-11-20T10:19:36.000Z</published>
    <updated>2019-11-22T01:04:57.726Z</updated>
    
    <content type="html"><![CDATA[<p>SpringCloud Config为微服务架构中的微服务提供了集中化的外部配置支持，配置服务器为各自不同微服务应用的所有环境提供了一个中心化的外部配置。<br><strong>服务端：</strong> 称为分布式配置中心，是一个独立的微服务应用，用来连接配置服务器并为客户端提供配置信息，加密/解密信息等访问接口。<br><strong>客户端：</strong> 通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息。    </p><h4 id="config服务端使用"><a href="#config服务端使用" class="headerlink" title="config服务端使用"></a>config服务端使用</h4><p>需要向集群注册自己，config的客户端才能访问<br><strong>pom加入</strong></p><pre><code class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></code></pre><p><strong>yml加入</strong>  </p><pre><code class="yml"><span class="attr">server:</span>   <span class="attr">port:</span> <span class="number">3344</span> <span class="attr">spring:</span>  <span class="attr">application:</span>    <span class="attr">name:</span>  <span class="string">microservicecloud-config</span>  <span class="attr">cloud:</span>    <span class="attr">config:</span>      <span class="attr">server:</span>        <span class="attr">git:</span>          <span class="attr">uri:</span> <span class="string">https://github.com/a984958991/microservicecloud-config</span> <span class="comment">#GitHub上面的git仓库名字</span></code></pre><p><strong>主启动类</strong></p><pre><code class="java"><span class="meta">@SpringBootApplication</span><span class="meta">@EnableConfigServer</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config_3344_StartSpringCloudApp</span></span><span class="class"></span>{    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><span class="function">    </span>{        SpringApplication.run(Config_3344_StartSpringCloudApp<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;    }}</code></pre><p>测试访问方式：<a href="http://localhost:3344/application-dev.yml" target="_blank" rel="noopener">http://localhost:3344/application-dev.yml</a>  </p><h4 id="config客户端使用"><a href="#config客户端使用" class="headerlink" title="config客户端使用"></a>config客户端使用</h4><p><strong>pom加入</strong></p><pre><code class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></code></pre><p><strong>加入优先级最高的bootstrap.yml（系统级）</strong></p><pre><code class="yml"><span class="attr">spring:</span>  <span class="attr">cloud:</span>    <span class="attr">config:</span>      <span class="attr">name:</span> <span class="string">microservicecloud-config-client</span> <span class="comment">#需要从github上读取的资源名称，注意没有yml后缀名</span>      <span class="attr">profile:</span> <span class="string">test</span>   <span class="comment">#本次访问的配置项</span>      <span class="attr">label:</span> <span class="string">master</span>         <span class="attr">uri:</span> <span class="string">http://config-3344.com:3344</span>  <span class="comment">#本微服务启动后先去找3344号服务，通过SpringCloudConfig获取GitHub的服务地址 config服务端的地址</span></code></pre><p>示例配置文件码云地址:  <a href="https://gitee.com/jinqiansheng/microservicecloud-config" target="_blank" rel="noopener">https://gitee.com/jinqiansheng/microservicecloud-config</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SpringCloud Config为微服务架构中的微服务提供了集中化的外部配置支持，配置服务器为各自不同微服务应用的所有环境提供了一个中心化的外部配置。&lt;br&gt;&lt;strong&gt;服务端：&lt;/strong&gt; 称为分布式配置中心，是一个独立的微服务应用，用来连接配置服务器并为客
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://jinqiansheng.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="SpringCloud" scheme="https://jinqiansheng.github.io/tags/SpringCloud/"/>
    
      <category term="Java" scheme="https://jinqiansheng.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Zuul路由网关</title>
    <link href="https://jinqiansheng.github.io/2019/11/19/Zuul%E8%B7%AF%E7%94%B1%E7%BD%91%E5%85%B3/"/>
    <id>https://jinqiansheng.github.io/2019/11/19/Zuul%E8%B7%AF%E7%94%B1%E7%BD%91%E5%85%B3/</id>
    <published>2019-11-19T10:19:36.000Z</published>
    <updated>2019-11-22T01:04:18.858Z</updated>
    
    <content type="html"><![CDATA[<p>提供代理、路由、过滤三大功能。<br>路由：负责将外部请求转发的具体的微服务实例上，是实现外部统一访问入口的基础。<br>过滤：对请求的处理过程进行干预，实现校验、服务聚合等功能。<br>它将自身注册为Eureka服务治理下的应用，同时从Eureka中获取其他微服务的消息。  </p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><strong>pom加入</strong></p><pre><code class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></code></pre><p><strong>yml加入</strong></p><pre><code class="yml"><span class="attr">zuul:</span>   <span class="comment">#ignored-services: microservicecloud-dept  #原真实服务名忽略(指定服务名","分隔)</span>  <span class="attr">prefix:</span> <span class="string">/jqs</span> <span class="comment">#统一的公共前缀</span>  <span class="attr">ignored-services:</span> <span class="string">"*"</span> <span class="comment">#忽略所有的真实服务名忽略</span>  <span class="attr">routes:</span>     <span class="attr">mydept.serviceId:</span> <span class="string">microservicecloud-dept</span> <span class="comment">#服务的实例名</span>    <span class="attr">mydept.path:</span> <span class="string">/mydept/**</span> <span class="comment">#映射后的访问名</span></code></pre><p><strong>主启动类</strong></p><pre><code class="java"><span class="meta">@SpringBootApplication</span><span class="meta">@EnableZuulProxy</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zuul_9527_StartSpringCloudApp</span></span><span class="class"></span>{    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><span class="function">    </span>{        SpringApplication.run(Zuul_9527_StartSpringCloudApp<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;提供代理、路由、过滤三大功能。&lt;br&gt;路由：负责将外部请求转发的具体的微服务实例上，是实现外部统一访问入口的基础。&lt;br&gt;过滤：对请求的处理过程进行干预，实现校验、服务聚合等功能。&lt;br&gt;它将自身注册为Eureka服务治理下的应用，同时从Eureka中获取其他微服务的消息。
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://jinqiansheng.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="SpringCloud" scheme="https://jinqiansheng.github.io/tags/SpringCloud/"/>
    
      <category term="Java" scheme="https://jinqiansheng.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hystrix断路器</title>
    <link href="https://jinqiansheng.github.io/2019/11/18/Hystrix%E6%96%AD%E8%B7%AF%E5%99%A8/"/>
    <id>https://jinqiansheng.github.io/2019/11/18/Hystrix%E6%96%AD%E8%B7%AF%E5%99%A8/</id>
    <published>2019-11-18T10:19:36.000Z</published>
    <updated>2019-11-22T01:04:00.668Z</updated>
    
    <content type="html"><![CDATA[<p>用于服务熔断和服务降级，能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。<br>当某个服务单元发生故障之后，通过断路器的故障监控，向调用方返回一个符合预期的，可处理的备选响应，而不是长时间的等待或抛出异常。  </p><h4 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h4><p><strong>pom加入</strong></p><pre><code class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></code></pre><p><strong>主启动类</strong></p><pre><code class="java"><span class="meta">@SpringBootApplication</span><span class="meta">@EnableEurekaClient</span><span class="comment">//本服务启动后会自动注册进eureka服务中</span><span class="meta">@EnableDiscoveryClient</span><span class="comment">//服务发现</span><span class="meta">@EnableCircuitBreaker</span><span class="comment">//对hystrixR熔断机制的支持</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProvider8001_Hystrix_App</span> </span>{    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{        SpringApplication.run(DeptProvider8001_Hystrix_App<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;    }}</code></pre><p><strong>调用</strong></p><pre><code class="java"><span class="meta">@GetMapping</span>(<span class="string">"getByid/{id}"</span>)<span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"processHystrix_Get"</span>)<span class="comment">//出现异常执行执行"processHystrix_Get"方法</span><span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span><span class="function"></span>{    Optional&lt;Dept&gt; op = deptList.stream().filter(e -&gt; e.getDeptno() == id).findFirst();    <span class="keyword">if</span>(op.isPresent()) {        <span class="keyword">return</span> op.get();    }<span class="keyword">else</span> {        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"该ID："</span> + id + <span class="string">"没有没有对应的信息"</span>);    }}<span class="function"><span class="keyword">public</span> Dept <span class="title">processHystrix_Get</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span><span class="function"></span>{    <span class="keyword">return</span> <span class="keyword">new</span> Dept().setDeptno(id).setDname(<span class="string">"该ID："</span> + id + <span class="string">"没有没有对应的信息,null--@HystrixCommand"</span>)                .setDbSource(<span class="string">"没得信息哇"</span>);}</code></pre><p>以上处理方式属于简易型的服务熔断。实际项目中熔断和降级是共同处理，我的理解就是使用通过熔断的机制达到服务降级的目的。  </p><h4 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h4><p>服务的降级处理是在客户端完成，服务端不做处理<br><strong>yml加入</strong></p><pre><code class="yml"><span class="attr">feign:</span>   <span class="attr">hystrix:</span>     <span class="attr">enabled:</span> <span class="literal">true</span></code></pre><p><strong>在@FeignClinent注解中加上fallbackFactory属性值</strong>  </p><pre><code class="java"><span class="meta">@FeignClient</span>(value = <span class="string">"MICROSERVICECLOUD-DEPT"</span>,fallbackFactory=DeptClientServiceFallbackFactory<span class="class">.<span class="keyword">class</span>)</span>@RequestMapping("/dept")<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptClientService</span> </span>{    <span class="meta">@GetMapping</span>(<span class="string">"/list"</span>)    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">list</span><span class="params">()</span></span>;    <span class="meta">@GetMapping</span>(<span class="string">"getByid/{id}"</span>)    <span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>;}</code></pre><p><strong>实现fallbackFactory属性值中的类</strong>  </p><pre><code class="java"><span class="meta">@Component</span><span class="comment">//必须加否则无效果</span><span class="comment">//实现FallbackFactory&lt;T&gt; 接口 T为service</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptClientServiceFallbackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">DeptClientService</span>&gt;</span>{    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> DeptClientService <span class="title">create</span><span class="params">(Throwable cause)</span> </span>{        <span class="keyword">return</span> <span class="keyword">new</span> DeptClientService() {            <span class="meta">@Override</span>            <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">list</span><span class="params">()</span> </span>{                <span class="keyword">return</span> <span class="keyword">null</span>;            }            <span class="meta">@Override</span>            <span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(Integer id)</span> </span>{                <span class="keyword">return</span> <span class="keyword">new</span> Dept().setDeptno(id).setDname(<span class="string">"该ID："</span> + id + <span class="string">"没有没有对应的信息,Consumer客户端提供的降级信息,此刻服务Provider已经关闭"</span>);            }        };    }}</code></pre><h4 id="hystrixDashboard服务监控"><a href="#hystrixDashboard服务监控" class="headerlink" title="hystrixDashboard服务监控"></a>hystrixDashboard服务监控</h4><p>Hystrix会通过hystrix-mettics-event-stream项目持续记录所有通过Hystrix发起的请求执行信息，并以报表的形式展示。<br><strong>POM加入</strong></p><pre><code class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></code></pre><p><strong>主启动类</strong></p><pre><code class="java"><span class="meta">@SpringBootApplication</span><span class="meta">@EnableHystrixDashboard</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumer_DashBoard_App</span></span><span class="class"></span>{    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><span class="function">    </span>{        SpringApplication.run(DeptConsumer_DashBoard_App<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;    }}</code></pre><p><strong>被监控的服务提供者pom需要加入actuator</strong></p><pre><code class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></code></pre><p>输入hystrixDashboard微服务的地址查看如：<a href="http://localhost:9001/hystrix" target="_blank" rel="noopener">http://localhost:9001/hystrix</a> 查看图形化界面，再根据提示查看特定微服务的访问图形化统计  </p><p><strong>实心圆：</strong> 通过颜色变化代表健康程度，分别从绿色&lt;黄色&lt;橙色&lt;红色递减。同时流量越大实心圆越大<br><strong>曲线：</strong> 可以记录指定毫秒内流量的上升和下降趋势</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用于服务熔断和服务降级，能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。&lt;br&gt;当某个服务单元发生故障之后，通过断路器的故障监控，向调用方返回一个符合预期的，可处理的备选响应，而不是长时间的等待或抛出异常。  &lt;/p&gt;
&lt;h4 
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://jinqiansheng.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="SpringCloud" scheme="https://jinqiansheng.github.io/tags/SpringCloud/"/>
    
      <category term="Java" scheme="https://jinqiansheng.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Feign负载均衡</title>
    <link href="https://jinqiansheng.github.io/2019/11/17/Feign%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>https://jinqiansheng.github.io/2019/11/17/Feign%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</id>
    <published>2019-11-17T10:19:36.000Z</published>
    <updated>2019-11-22T01:03:27.563Z</updated>
    
    <content type="html"><![CDATA[<p>Feign是一个声明式的WebService客户端，使用Feign能让编写Web Service客户端更加简单。支持JAx-RS标准的注解，支持可拔插式的编码器和解码器，支持Spring MVC标准注解和HttpMessageConverters。可以与Eureka和Ribbon组合使用支持负载均衡。<br><font color=#FF0000 >简单来说就是Feign封装Ribbon，在实际使用一个借口会被多个消费方调用，使用Feign可以封装这些服务提供方的接口，只需要加上一个Feign注解即可，简化了使用ribbon时自动封装服务调用客户端的开发量 </font>  </p><h4 id="消费方客户端使用"><a href="#消费方客户端使用" class="headerlink" title="消费方客户端使用"></a>消费方客户端使用</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">```  </span><br><span class="line">**主启动类示例**</span><br><span class="line">``` java</span><br><span class="line">@SpringBootApplication(scanBasePackages = "com.jqs.springcloud")//启动时扫描哪些包</span><br><span class="line">@EnableFeignClients(basePackages= &#123;"com.jqs.springcloud"&#125;)//扫描所有使用注解@FeignClient定义的feign客户端</span><br><span class="line">public class DeptConsumerFeign_App &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(DeptConsumerFeign_App .class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">#### 接口实现</span><br><span class="line">接口实现服务提供者开放的接口</span><br><span class="line">``` java</span><br><span class="line">@FeignClient(value = "MICROSERVICECLOUD-DEPT")</span><br><span class="line">@RequestMapping("/dept")</span><br><span class="line">public interface DeptClientService &#123;</span><br><span class="line">@GetMapping("/list")</span><br><span class="line">public List<span class="tag">&lt;<span class="name">Dept</span>&gt;</span> list();</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">**调用**</span><br><span class="line">调用时只需要调用@FeignClient注解的借口即可调用服务提供者的api，且默认的轮询负载均衡，如果有需要可以重写负载均衡算法。  </span><br><span class="line">``` java</span><br><span class="line">@Autowired</span><br><span class="line">private DeptClientService deptClientService;</span><br></pre></td></tr></table></figure><p>如果报错误异常，提示找不到@FeignClient注解的vlaue的属性赋值的实例名，则需要在yml配置实例名所指向的实际服务地址(具体我也没找到原因，在debug的源码，发现@Autowired 带有@FeignClient的接口信息时 allServiceList为null。以后在研究)，如</p><pre><code class="yml"><span class="attr">MICROSERVICECLOUD-DEPT:</span> <span class="comment">##实例名</span>  <span class="attr">ribbon:</span>    <span class="comment">## 服务提供者的地址，不是服务注册中心的地址</span>    <span class="attr">listOfServers:</span> <span class="string">http://localhost:8001,http://localhost:8002,http://localhost:8003</span><span class="comment">## 这个要有，如果不加，只加了上面也没用</span><span class="attr">ribbon:</span>  <span class="attr">eureka:</span>    <span class="attr">enabled:</span> <span class="literal">false</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Feign是一个声明式的WebService客户端，使用Feign能让编写Web Service客户端更加简单。支持JAx-RS标准的注解，支持可拔插式的编码器和解码器，支持Spring MVC标准注解和HttpMessageConverters。可以与Eureka和Rib
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://jinqiansheng.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="SpringCloud" scheme="https://jinqiansheng.github.io/tags/SpringCloud/"/>
    
      <category term="Java" scheme="https://jinqiansheng.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Ribbon负载均衡</title>
    <link href="https://jinqiansheng.github.io/2019/11/16/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>https://jinqiansheng.github.io/2019/11/16/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</id>
    <published>2019-11-16T10:19:36.000Z</published>
    <updated>2019-11-22T01:02:52.300Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套<font color=#FF0000 >客户端负载均衡工具。  </font><br>主要提供客户端的软件负载均衡算法，将Netflix的中间层服务连接在一起，提供一系列完善的配置项，如连接超时、重试等。<br>简单来说就是在配置文件中列出Load Balancer(简称LB)后面所有的极其，Ribbon自动帮你基于某种规则去连接，并可以自定义负载均衡算法。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>Ribbon是一套客户端的负载均衡工具，需要在消费方使用<br><strong>pom引入相关jar包</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Ribbon相关 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">```  </span><br><span class="line">**yml加入**</span><br><span class="line">``` yml</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: false #不注册自身</span><br><span class="line">    service-url: </span><br><span class="line">      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/  #eureka集群</span><br><span class="line">```  </span><br><span class="line">**主启动类**</span><br><span class="line">``` java</span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">public class Consumer_App</span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        SpringApplication.run(Consumer_App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">在ConfigBean声明的Bean  </span><br><span class="line">RestTemplate需要加入@LoadBalanced注解，restTemplate就可以通过微服务名进行访问,默认采用轮询的负载均衡算法</span><br><span class="line">``` java</span><br><span class="line">@Configuration</span><br><span class="line">public class ConfigBean &#123;</span><br><span class="line">@Bean</span><br><span class="line">@LoadBalanced</span><br><span class="line">public RestTemplate getRestTemplate() &#123;</span><br><span class="line">return new RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line">     </span><br><span class="line">     /**</span><br><span class="line">     *定义负载均衡算法，不写默认为轮询</span><br><span class="line">     **/</span><br><span class="line">     @Bean</span><br><span class="line">    public IRule myRule()</span><br><span class="line">    &#123;</span><br><span class="line">        return new RandomRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">#### Ribbon核心组件IRule</span><br><span class="line">默认的7种负载均衡的算法</span><br><span class="line">|名称|说明|</span><br><span class="line">|:---:|:---|</span><br><span class="line">|RoundRobinRule|轮询算法（是Ribbon默认的负载均衡机制）|</span><br><span class="line">|RandomRule|随机访问算法|</span><br><span class="line">|RetryRule|先按照 RoundRobinRule 的策略访问服务，如果访问的服务宕机或者出现异常的情况，则在指定时间内会进行重试，访问其它可用的服务|</span><br><span class="line">|BestAvailableRule|首先会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务访问|</span><br><span class="line">|ZoneAvoidanceRule|默认规则,复合判断server所在区域的性能和server的可用性选择服务器|</span><br><span class="line">|AvailabilityFilteringRule|首先会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，还有并发的连接数量超过阈值的服务，然后对剩余的服务列表按照轮询策略进行访问|</span><br><span class="line">|WeightedResponseTimeRule|根据平均响应时间计算所有服务的权重，响应时间越快服务权重越大被选中的概率越高。刚启动时如果统计信息不足，则使用RoundRobinRule策略，等统计信息足够，会切换到WeightedResponseTimeRule|</span><br><span class="line"></span><br><span class="line">#### Ribbon自定义负载均衡算法</span><br><span class="line">使用自定义Ribbon 需要再主启动类上加入@RibbonClient  </span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#FF0000</span>&gt;</span>注意：自定义的负载均衡算法配置类不能放在@ComponentScan所扫描的当前包下以及包下，</span><br><span class="line">否则自定义的这个配置类就会被所有的Ribbon客户端共享。<span class="tag">&lt;/<span class="name">font</span>&gt;</span>  </span><br><span class="line">**主启动加入@RibbonClient注解**  </span><br><span class="line">``` java</span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">//在启动该微服务的时候就能去加载我们的自定义Ribbon配置类，从而使配置生效</span><br><span class="line">//name = 微服务名</span><br><span class="line">//configuration = 自定义负载均衡算法的类</span><br><span class="line">@RibbonClient(name="MICROSERVICECLOUD-DEPT",configuration=MySelfRule.class)</span><br><span class="line">public class Consumer_App</span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        SpringApplication.run(Consumer_App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">自定义写法与调用Ribbon自带的7种类似，但需要自己写类去实现AbstractLoadBalancerRule接口，具体写法可参照自带的7种负载均衡算法去实现（比如参照轮询或者随机这种比较简单的负载均衡算法的源码去实现自己想要的）。</span><br><span class="line">``` java</span><br><span class="line">@Configuration</span><br><span class="line">public class MySelfRule &#123;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public IRule myRule()</span><br><span class="line">&#123;</span><br><span class="line">return new RoundRobinRule_T();//自定义负载均衡</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring Cloud Ribbon是基于Netflix Ribbon实现的一套&lt;font color=#FF0000 &gt;客户端负载均衡工具。  &lt;/font&gt;&lt;br&gt;主要提供客户端的软件负载均衡算法，将Netflix的中间层服务连接在一起，提供一系列完善的配置项，如连接
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://jinqiansheng.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="SpringCloud" scheme="https://jinqiansheng.github.io/tags/SpringCloud/"/>
    
      <category term="Java" scheme="https://jinqiansheng.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Eureka服务注册于发现</title>
    <link href="https://jinqiansheng.github.io/2019/11/15/Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%BA%8E%E5%8F%91%E7%8E%B0/"/>
    <id>https://jinqiansheng.github.io/2019/11/15/Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%BA%8E%E5%8F%91%E7%8E%B0/</id>
    <published>2019-11-15T10:19:36.000Z</published>
    <updated>2019-11-22T01:53:04.291Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#FF0000 >Eureka用于实现服务注册和发现，</font>是Netflix的一个子模块，也是核心模块之一。Eureka是一个极具Rest的服务，用于定位服务，以实现云端中间层服务发现和故障转移。服务注册于发现对于微服务架构来说是非常重要的，有了服务发现与注册，只需要使用服务器的标识符，就可以访问到服务，而不需要修改服务调用的配置文件。功能类似于dubbo的注册中心，比如Zookeeper。</br><br>Eureka采用了C-S的设计架构，Eureka Server 作为服务注册功能的服务器，是服务的注册中心，而系统中的其他微服务，使用Eureka的客户端连接到Eureka Server并维持心跳连接。这样系统的维护人员就可以通过Eureka Server来监控系统中各个微服务是否正常运行。SpringCloud的一些其他的模块(比如Zuul)就可以通过Eureka Server来发现系统中的其他微服务，并执行相关逻辑。</br><br><strong><font color=#FF0000 >简单来说就是负责发现和注册微服务，并通过Eureka Server维持各个微服务之间的心跳连接。</font></strong></p><h4 id="两大组件："><a href="#两大组件：" class="headerlink" title="两大组件："></a>两大组件：</h4><p><strong>Eureka Server：</strong><br>提供注册服务,各个节点启动后，会在EurekaServer中进行注册，这样EurekaServer中的服务注册表中将会存储所以可用服务节点的信息，服务节点的信息可以在界面中直观的看到。</p><p><strong>Eureka Client：</strong> 是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置、使用轮询负载算法的负载均衡器。再应用启动后，将会向Eureka Server发送心跳（默认周期是30秒）。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除（默认90秒）</p><h4 id="Eureka对比Zookeeper的优点："><a href="#Eureka对比Zookeeper的优点：" class="headerlink" title="Eureka对比Zookeeper的优点："></a>Eureka对比Zookeeper的优点：</h4><p>在CAP的理论中,一个分布式系统不能同时满足C（一致性）、A（可用性）、P（分区容错性）。由于分区容错性P在分布式系统中必须要保证，因此只能在A和C之间进行权衡。</p><blockquote><p>CAP原则又称CAP定理，指的是在一个分布式系统中， Consistency（一致性）、         Availability（可用性）、Partition tolerance（分区容错性），三者不可得兼。</p><p><strong>一致性（C）：</strong><br>在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）</p><p><strong>可用性（A）：</strong><br>在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性）</p><p><strong>分区容忍性（P）：</strong><br>以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择。</p><p> <img src="https://s2.ax1x.com/2019/11/22/MoWOII.png" alt="ACP"><br>CAP原则的精髓就是要么AP，要么CP，要么AC，但是不存在CAP。如果在某个分布式系统中数据无副本， 那么系统必然满足强一致性条件， 因为只有独一数据，不会出现数据不一致的情况，此时C和P两要素具备，但是如果系统发生了网络分区状况或者宕机，必然导致某些数据不可以访问，此时可用性条件就不能被满足，即在此情况下获得了CP系统，但是CAP不可同时满足 。<br>因此在进行分布式架构设计时，必须做出取舍。当前一般是通过分布式缓存中各节点的最终一致性来提高系统的性能，通过使用多节点之间的数据异步复制技术来实现集群化的数据一致性。通常使用类似 memcached 之类的 NOSQL 作为实现手段。虽然 memcached 也可以是分布式集群环境的，但是对于一份数据来说，它总是存储在某一台 memcached 服务器上。如果发生网络故障或是服务器死机，则存储在这台服务器上的所有数据都将不可访问。由于数据是存储在内存中的，重启服务器，将导致数据全部丢失。当然也可以自己实现一套机制，用来在分布式 memcached 之间进行数据的同步和持久化，但是实现难度是非常大的 。  </p></blockquote><p><strong><font color=#FF0000 >Zookeeper保证的是CP</font></strong><br>服务注册功能对一致性要求高，当master节点因为网络故障和其他节点失去联系时，剩余节点会重新进行Leader选举。这个时间持续30~120s，选举期间整个zk集群为不可用的，导致选举期间服务注册瘫痪。<br><strong><font color=#FF0000 >Eureka则是AP</font></strong><br>优先保证可用性，Eureka各个节点都是平等的，如果某几个几点故障，只要有一台Eureka在，就能保证注册服务可用，只不过查到的信息可能不是最新的，而Eureka的自我保护机制，如果在15分钟内超过85的节点都没有正常心跳，那么Eureka就认为客户端与注册中心出现网络故障，会出现以下几种情况</p><ol><li>Eureka不在从注册列表中移除因为长时间没有收到心跳而应该过期的服务</li><li>Eureka仍然能够接受新的服务注册和查询请求，但不会同步到其他节点，只保证当前节点依然可用</li><li>当网络稳定时，当前实例新注册的信息会同步到其他节点</li></ol><p><strong><font color=#FF0000 >Eureka可以很好的应对网络故障导致的部分节点失去联系的情况，而不会像Zookeeper那样使整个注册服务瘫痪。</font></strong></p><h4 id="EurekaServer使用"><a href="#EurekaServer使用" class="headerlink" title="EurekaServer使用"></a>EurekaServer使用</h4><p><strong>pom引入jar包</strong>  </p><pre><code class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></code></pre><p><strong>yml加入</strong>  </p><pre><code class="yml"><span class="attr">eureka:</span>   <span class="attr">instance:</span>    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment">#eureka服务端的实例名称</span>  <span class="attr">client:</span>     <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false表示不向注册中心注册自己。</span>    <span class="attr">fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span>    <span class="attr">service-url:</span>       <span class="attr">defaultZone:</span> <span class="string">http://${eureka.instance.hostname}:${server.port}/eureka/</span> </code></pre><p><strong>启动类加入注解启用</strong>  </p><pre><code class="java"><span class="meta">@SpringBootApplication</span><span class="meta">@EnableEurekaServer</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServer_App</span> </span>{    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{        SpringApplication.run(EurekaServer_App<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;    }}</code></pre><h4 id="EurekaClient-使用"><a href="#EurekaClient-使用" class="headerlink" title="EurekaClient 使用"></a>EurekaClient 使用</h4><p><strong>pom引入jar包</strong>  </p><pre><code class="xml"><span class="comment">&lt;!-- 将微服务provider侧注册进eureka --&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></code></pre><p><strong>yml加入</strong>  </p><pre><code class="yml"><span class="attr">eureka:</span>  <span class="attr">client:</span> <span class="comment">#客户端注册进eureka服务列表内</span>    <span class="attr">service-url:</span>       <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span> <span class="comment">#EurekaServer的地址</span>  <span class="attr">instance:</span>    <span class="attr">instance-id:</span> <span class="string">microservicecloud-dept8001</span> <span class="comment">#别名</span>    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>     <span class="comment">#访问路径可以显示IP地址  </span></code></pre><p><strong>启动类加入注解注册</strong></p><pre><code class="java"><span class="meta">@SpringBootApplication</span><span class="meta">@EnableEurekaClient</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaClient_App</span> </span>{    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{        SpringApplication.run(EurekaClient_App <span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;    }}</code></pre><h4 id="服务提供者加入info监控信息"><a href="#服务提供者加入info监控信息" class="headerlink" title="服务提供者加入info监控信息"></a>服务提供者加入info监控信息</h4><p><strong>父maven项目加入</strong>  </p><pre><code class="xml"><span class="tag">&lt;<span class="name">build</span>&gt;</span>    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>microservicecloud<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span>    <span class="tag">&lt;<span class="name">resources</span>&gt;</span>        <span class="tag">&lt;<span class="name">resource</span>&gt;</span>            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span>            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span>        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span>    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span>    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>                <span class="tag">&lt;<span class="name">delimiters</span>&gt;</span>                    <span class="tag">&lt;<span class="name">delimit</span>&gt;</span>$<span class="tag">&lt;/<span class="name">delimit</span>&gt;</span>                <span class="tag">&lt;/<span class="name">delimiters</span>&gt;</span>            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span><span class="tag">&lt;/<span class="name">build</span>&gt;</span></code></pre><p><strong>pom加入</strong></p><pre><code class="xml"><span class="comment">&lt;!-- actuator监控信息完善 --&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></code></pre><p><strong>yml加入</strong></p><pre><code class="yml"><span class="attr">info:</span> <span class="comment">#点击别名页面所显示的说明</span>   <span class="attr">app.name:</span> <span class="string">atguigu-microservicecloud</span>    <span class="attr">company.name:</span> <span class="string">www.atguigu.com</span>   <span class="attr">build.artifactId:</span> <span class="string">$project.artifactId$</span>   <span class="attr">build.version:</span> <span class="string">$project.version$</span>  </code></pre><h4 id="Eureka自我保护机制"><a href="#Eureka自我保护机制" class="headerlink" title="Eureka自我保护机制"></a>Eureka自我保护机制</h4><p>某时刻某一微服务不可用了，eureka不会立刻清理，依旧会对该微服务的信息进行保存。<br>默认情况下，如果EurekaServer在一定时间内没有接收到某个微服务实例的心跳，EurekaServer将会注销该实例，（默认90秒），但是当网络分区故障发生时，微服务与EurekaServer之间无法正常通信，Eureka会通过自我保护机制解决这个问题，一旦进入该模式，EurekaServer就会保护服务注册表中的信息，不再删除服务祖册表中的数据（也就是不会注销任何微服务）。当网络故障恢复后，该EurekaServer节点会自动退出自我保护模式。<br>自我保护模式中，EureKa Server会保护服务注册表中的信息，不再注销任何服务实例。当它收到心跳数重新恢复到阀值以上时，该EurekaServer 节点会自动退出自我保护模式。  </p><p><strong><font color=#FF0000 >总的来说就是在触发EurekaServer的保护模式后，它宁可保留错误的服务注册信息，也不会盲目注销任何可能健康的服务实例。</font></strong></p><h4 id="禁用自我保护模式"><a href="#禁用自我保护模式" class="headerlink" title="禁用自我保护模式"></a>禁用自我保护模式</h4><p><strong>Eureka Server端</strong>  </p><pre><code class="properties"><span class="meta">eureka.server.enable-self-preservation</span> <span class="string">#设为false，关闭自我保护</span><span class="meta">eureka.server.eviction-interval-timer-in-ms</span> <span class="string">#清理间隔（单位毫秒，默认是60*1000）</span></code></pre><p><strong>Eureka Client端</strong>  </p><pre><code class="properties"><span class="meta">eureka.client.healthcheck.enabled</span> <span class="string">#开启健康检查（需要spring-boot-starter-actuator依赖）</span><span class="meta">eureka.instance.lease-renewal-interval-in-seconds</span> <span class="string">#续约更新时间间隔（默认30秒）</span><span class="meta">eureka.instance.lease-expiration-duration-in-seconds</span> <span class="string">#续约到期时间（默认90秒</span></code></pre><h4 id="Discovery服务发现"><a href="#Discovery服务发现" class="headerlink" title="Discovery服务发现"></a>Discovery服务发现</h4><p>用于发现服务提供者<br><strong>主启动类上引用</strong>  </p><pre><code class="java"><span class="meta">@SpringBootApplication</span><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//服务发现</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaClient_App</span></span><span class="class"></span>{    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><span class="function">    </span>{        SpringApplication.run(EurekaClient_App<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;    }}</code></pre><p><strong>调用代码使用示例</strong>  </p><pre><code class="java"><span class="meta">@Autowired</span><span class="keyword">private</span> DiscoveryClient client;<span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span></span><span class="function">    </span>{        List&lt;String&gt; list = client.getServices();        System.out.println(<span class="string">"**********"</span> + list);        List&lt;ServiceInstance&gt; srvList = client.getInstances(<span class="string">"MICROSERVICECLOUD-DEPT"</span>);        <span class="keyword">for</span> (ServiceInstance element : srvList) {            System.out.println(element.getServiceId() + <span class="string">"\t"</span> + element.getHost() + <span class="string">"\t"</span> + element.getPort() + <span class="string">"\t"</span>                    + element.getUri());        }        <span class="keyword">return</span> <span class="keyword">this</span>.client;    }</code></pre><h4 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h4><p>多个EurekaServer可以互相牵手形成集群，某一个注册中心因为特殊原因发生故障服务提供者无法注册时会向集群中的别的EurekaServer注册，当故障解除后集群中的EurekaServer再进行同步注册信息。<br><strong>在EurekaServer yml中配置牵手</strong>  </p><pre><code class="properties"><span class="meta">eureka.client.service-url.defaultZone</span>: <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span></code></pre><p><strong>在Eureka client中向集群的所有EurekaServer注册 yml配置如下</strong>  </p><pre><code class="properties"><span class="meta">eureka.client.service-url.defaultZone</span>: <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font color=#FF0000 &gt;Eureka用于实现服务注册和发现，&lt;/font&gt;是Netflix的一个子模块，也是核心模块之一。Eureka是一个极具Rest的服务，用于定位服务，以实现云端中间层服务发现和故障转移。服务注册于发现对于微服务架构来说是非常重要的，
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://jinqiansheng.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="SpringCloud" scheme="https://jinqiansheng.github.io/tags/SpringCloud/"/>
    
      <category term="Java" scheme="https://jinqiansheng.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud概述</title>
    <link href="https://jinqiansheng.github.io/2019/11/14/SpringCloud%E6%A6%82%E8%BF%B0/"/>
    <id>https://jinqiansheng.github.io/2019/11/14/SpringCloud%E6%A6%82%E8%BF%B0/</id>
    <published>2019-11-14T10:19:36.000Z</published>
    <updated>2019-11-22T01:41:36.885Z</updated>
    
    <content type="html"><![CDATA[<p>分布式微服务架构下的一站式解决方案，是各个微服务架构落地技术的几何体，俗称微服务全家桶。</p><h4 id="SpringCloud和SrpingBoot的关系"><a href="#SpringCloud和SrpingBoot的关系" class="headerlink" title="SpringCloud和SrpingBoot的关系"></a>SpringCloud和SrpingBoot的关系</h4><ol><li>SpringBoot专注于快速方便开发单个个体微服务</li><li>SpringCloud是关注全局的微服务协调治理框架，它将SpringBoot开发的一个个单体微服务整合并管理起来，为各个微服务之间提供配置管理、服务发现、断路器、路由、微代理、实践总线、全局锁、决策竞选、分布式会话等等集成服务</li><li>SpringBoot可以离开SpringCloud独立使用开发项目，但是SpringCloud离不开SpringBoot，属于依赖关系</li></ol><h4 id="Dubbo和SpringCloud的区别："><a href="#Dubbo和SpringCloud的区别：" class="headerlink" title="Dubbo和SpringCloud的区别："></a>Dubbo和SpringCloud的区别：</h4><p><strong>技术栈对比</strong></p><table><thead><tr><th align="center">技术栈</th><th align="center">Dubbo</th><th align="center">SpringCloud</th></tr></thead><tbody><tr><td align="center">服务注册中心</td><td align="center">Zookeeper(第三方)</td><td align="center">Srping Cloud Netflix Eureka</td></tr><tr><td align="center">服务调用方式</td><td align="center">RPC</td><td align="center">Rest API</td></tr><tr><td align="center">服务监控</td><td align="center">Dubbo-monitor</td><td align="center">Spring Boot Admin</td></tr><tr><td align="center">断路器</td><td align="center">不完善</td><td align="center">Spring Cloud Netflix Hystrix</td></tr><tr><td align="center">服务网关</td><td align="center">无</td><td align="center">Spring Cloud Netflix Zuul</td></tr><tr><td align="center">分布式配置</td><td align="center">无</td><td align="center">Spring Cloud Config</td></tr><tr><td align="center">服务跟踪</td><td align="center">无</td><td align="center">Spring Cloud Sleuth</td></tr><tr><td align="center">消息总线</td><td align="center">无</td><td align="center">Spring Cloud Bus</td></tr><tr><td align="center">数据流</td><td align="center">无</td><td align="center">Spring Cloud Stream</td></tr><tr><td align="center">批量任务</td><td align="center">无</td><td align="center">Spring Cloud Task</td></tr><tr><td align="center">……</td><td align="center"></td><td align="center"></td></tr></tbody></table><p><strong>区别：</strong></p><ol><li><p>SpringCloud抛弃了Dubbo的RPC通信，采用的是基于HTTP的Rest方式，严格来说，这两种方式各有优劣。虽然一定程度上来说，后者牺牲了服务调用的性能，但也避免了上面提到的原生RPC带来的问题。而且Rest相比RPC更为灵活，服务提供方和调用方的依赖只依靠一纸契约，不存在代码级别的强依赖，这在强调快速烟花的微服务环境下，显得更加灵活。</p></li><li><p>SpringCloud提供了分布式的一站式服务对自身各个组件有大量的兼容测试，而Dubbo构建的微服务架构，自由度很高，但是需要开发人员对各组件的基础有足够的了解，从构建项目的成本来讲SpringCloud要优于Dubbo。</p></li><li><p>社区支持和更新力度，Dubbo停止更新了5年左右，SpringCloud是Spring的拳头项目，更新力度较高，社区也相对活跃，学习成本低于Dubbo。</p><blockquote><p><strong>HTTP：</strong> 是指从客户端到服务端的请求消息，请求是使用具有标准定义的通用接口定向到资源的，这些语义能够被中间件和提供服务的来源机器进行解释。这样会使一个应用支撑分层的转换和间接层，并且独立于消息的来源，这对于一个Internet规模，多个组织，无法控制的可伸缩的信息系统来说，是非常有用的。主要用于对外的异构环境，浏览器接口调用，app接口调用，第三方接口调用等</p><p><strong>PRC：</strong> 是远程过程调用协议，根据语言的API来定义的，而不是根据基于网络的应用来定义的。主要用于公司内  </p><table><thead><tr><th align="center">&emsp;&emsp;&emsp;&emsp;</th><th align="left">HTTP</th><th align="left">RPC</th></tr></thead><tbody><tr><td align="center">传输协议</td><td align="left">基于HTTP协议</td><td align="left">可以基于TCP协议，也可以基于HTTP协议；</td></tr><tr><td align="center">传输效率</td><td align="left">如果是基于HTTP1.1的协议，请求中会包含很多无用的内容，如果是基于HTTP2.0的协议，那么简单的封装一下是可以作为一个RPC来使用的，这时标准RPC框架更多的是服务治理。</td><td align="left">使用自定义的TCP协议，可以让请求报文体积更小，或者使用HTTP2协议，也可以很好的减少报文的体积，提高传输效率。</td></tr><tr><td align="center">性能消耗</td><td align="left">大部分是通过json来实现的，字节大小和序列化耗时都比thrift要更消耗性能</td><td align="left">可以基于thrift实现高效的二进制传输</td></tr><tr><td align="center">负载均衡</td><td align="left">需要配置Nginx，HAProxy来实现</td><td align="left">基本都自带负载均衡策略</td></tr><tr><td align="center">服务治理</td><td align="left">需要事先通知，修改Nginx，HAProxy配置</td><td align="left">能做到自动通知，不影响上游</td></tr></tbody></table></blockquote></li></ol><h4 id="开发参考："><a href="#开发参考：" class="headerlink" title="开发参考："></a>开发参考：</h4><p>中文API：<a href="https://www.springcloud.cc/spring-cloud-dalston.html" target="_blank" rel="noopener">https://www.springcloud.cc/spring-cloud-dalston.html</a><br>中文社区：<a href="https://www.springcloud.cn" target="_blank" rel="noopener">https://www.springcloud.cn</a><br>中文网：<a href="https://www.springcloud.cc" target="_blank" rel="noopener">https://www.springcloud.cc</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;分布式微服务架构下的一站式解决方案，是各个微服务架构落地技术的几何体，俗称微服务全家桶。&lt;/p&gt;
&lt;h4 id=&quot;SpringCloud和SrpingBoot的关系&quot;&gt;&lt;a href=&quot;#SpringCloud和SrpingBoot的关系&quot; class=&quot;headerlin
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://jinqiansheng.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="SpringCloud" scheme="https://jinqiansheng.github.io/tags/SpringCloud/"/>
    
      <category term="Java" scheme="https://jinqiansheng.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>微服务概述</title>
    <link href="https://jinqiansheng.github.io/2019/11/13/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E8%BF%B0/"/>
    <id>https://jinqiansheng.github.io/2019/11/13/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E8%BF%B0/</id>
    <published>2019-11-13T08:19:36.000Z</published>
    <updated>2019-11-22T00:59:51.284Z</updated>
    
    <content type="html"><![CDATA[<p>微服务是指开发一个单个小型的但有业务功能的服务，每个服务都有自己的处理和轻量通讯机制，可以部署在单个或多个服务器上。微服务也指一种种松耦合的、有一定的有界上下文的面向服务架构。</p><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ol><li>将单个的应用程序作为一套小型服务器开发的方法</li><li>每个应用程序都运行在自己的进程中</li><li>运用轻量级的机制进行通信（通常是HTTP资源API）</li></ol><h4 id="微服务和微服务架构的区别"><a href="#微服务和微服务架构的区别" class="headerlink" title="微服务和微服务架构的区别"></a>微服务和微服务架构的区别</h4><p><strong>微服务：</strong><br>（强调的是一个一个的个体），它关注的是某一个点，是具体解决某一问题/提供落地对应服务的一个服务应用。</p><p><strong>微服务架构:</strong><br>是一种架构模式，提倡将单一的应用程序划分成一组小的服务，相互协调、相互配合。</p><h4 id="微服务架构优缺点："><a href="#微服务架构优缺点：" class="headerlink" title="微服务架构优缺点："></a>微服务架构优缺点：</h4><p><strong>优点：</strong></p><ul><li>每个服务足够内聚，足够小，代码容易理解这样能聚焦一个指定的业务功能或业务需求。</li><li>开发简单、开发效率提高，每个服务可能只专一的干一件事。</li><li>微服务能够被小团队单独开发，团队中的每个人主需要关注自己的工作成果，无需合作才能体现价值</li><li>微服务是松耦合的，是功能意义上的服务，开发、部署阶段都是独立的</li><li>可以使用不同的语言开发</li><li>易与和第三方集成</li><li>微服务只是业务逻辑的代码，不会和HTML，CSS或其他界面组件混合。</li><li>每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一的数据库</li></ul><p><strong>缺点：</strong></p><ul><li>开发人员要处理分布式系统的复杂性</li><li>多服务运维难度随服务的增加而增加</li><li>系统部署依赖</li><li>服务之间的通信成本</li><li>数据一致性</li><li>系统集成测试</li></ul><h4 id="微服务架构技术栈"><a href="#微服务架构技术栈" class="headerlink" title="微服务架构技术栈"></a>微服务架构技术栈</h4><table><thead><tr><th align="left">微服务条目</th><th align="left">落地技术</th></tr></thead><tbody><tr><td align="left">服务开发</td><td align="left">SpringBoot、Spring、SpringMVC</td></tr><tr><td align="left">服务配置与管理</td><td align="left">Netfilx公司的Archaius、阿里的Diamond等</td></tr><tr><td align="left">服务注册与发现</td><td align="left">Eureka、Consul、Zookeeper等</td></tr><tr><td align="left">服务调用</td><td align="left">Rest、RPC、gRPC</td></tr><tr><td align="left">服务熔断器</td><td align="left">Hystrix、Envoy等</td></tr><tr><td align="left">负载均衡</td><td align="left">Ribbon、Nginx等</td></tr><tr><td align="left">服务接口调用</td><td align="left">Feign等</td></tr><tr><td align="left">消息队列</td><td align="left">Kafka、RabbitMQ、ActiveMQ等</td></tr><tr><td align="left">服务配置中心管理</td><td align="left">SpringCloudConfig、Chef等</td></tr><tr><td align="left">服务路由(API网关)</td><td align="left">Zuul等</td></tr><tr><td align="left">服务监控</td><td align="left">Zabbix、Nagios、Metrics、Specator等</td></tr><tr><td align="left">全链路追踪</td><td align="left">Zipkin、Brave、Dapper等</td></tr><tr><td align="left">服务部署</td><td align="left">Docker、OpenStack、Kubernetes等</td></tr><tr><td align="left">数据流操作开发包</td><td align="left">SpringCloudStream(封装与Redis、Rabbit、Kafka等发送接收消息)</td></tr><tr><td align="left">实践消息总线</td><td align="left">SpringCloud Bus</td></tr><tr><td align="left">……</td><td align="left"></td></tr></tbody></table><h4 id="SrpingCloud作为微服务架构的优势："><a href="#SrpingCloud作为微服务架构的优势：" class="headerlink" title="SrpingCloud作为微服务架构的优势："></a>SrpingCloud作为微服务架构的优势：</h4><ol><li>微服务架构完整（微服务所需技术栈相对比较完善）</li><li>支持Rest支持多种可插拔序列号选择</li><li>支持多语言</li><li>高可用/容错（服务端Hystrix+客户端Ribbon）</li><li>社区活跃度高，文档相对比较丰富</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;微服务是指开发一个单个小型的但有业务功能的服务，每个服务都有自己的处理和轻量通讯机制，可以部署在单个或多个服务器上。微服务也指一种种松耦合的、有一定的有界上下文的面向服务架构。&lt;/p&gt;
&lt;h4 id=&quot;特点：&quot;&gt;&lt;a href=&quot;#特点：&quot; class=&quot;headerlin
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://jinqiansheng.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="SpringCloud" scheme="https://jinqiansheng.github.io/tags/SpringCloud/"/>
    
      <category term="Java" scheme="https://jinqiansheng.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java8新特性</title>
    <link href="https://jinqiansheng.github.io/2019/11/12/java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://jinqiansheng.github.io/2019/11/12/java8%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2019-11-12T08:19:36.000Z</published>
    <updated>2019-11-22T00:56:58.886Z</updated>
    
    <content type="html"><![CDATA[<p>Java语言、编译器、类库、开发工具与JVM（Java虚拟机）带来了大量新特性。这些特性将颠覆以往的写代码习惯，简化开发量。</p><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(parameters) -&gt; expression || (parameters) -&gt;&#123; statements; &#125;</span><br></pre></td></tr></table></figure><p><strong>左侧：</strong><br>Lambda 表达式的列表参数，如getValue(T,R); 就应该是(T,R) -&gt; xxxxx，如果无参数就直接写 () -&gt; xxxxx，只有一个参数小括号可以不写;</p><p><strong>右侧：</strong><br>Lambda 表达式的方法体（Lambda体），就是对getValue(T,R)的实现，方法体有多条语句 可以用大括号括起来，如：-&gt; {xxxxx;xxxxx;}，只有一条语句 return 和 {}都可以不写;</p><p><strong><font color=#FF0000 >注意：</font></strong><br>Lambda表达式只支持函数式接口（只有一个方法的接口）可以使用@FunctionalInterface 修饰，可以检查接口是否是函数式接口;</p><p><strong>四大内置核心函数：</strong></p><table><thead><tr><th align="center">类名</th><th align="center">类型</th><th align="center">方法</th></tr></thead><tbody><tr><td align="center">Consumer&lt; T &gt;</td><td align="center">消费型接口</td><td align="center">void accept(T t)</td></tr><tr><td align="center">Supplier&lt; T &gt;</td><td align="center">供给型接口</td><td align="center">T get()</td></tr><tr><td align="center">Function&lt; T, R &gt;</td><td align="center">函数型接口</td><td align="center">R apply(T t)</td></tr><tr><td align="center">Predicate&lt; T &gt;</td><td align="center">断言型接口</td><td align="center">boolean test(T t)</td></tr></tbody></table><p><strong>其他函数式接口：</strong></p><table><thead><tr><th align="center">类名</th><th align="left">参数说明</th><th align="center">方法</th></tr></thead><tbody><tr><td align="center">BiFunction&lt;T, U, R&gt;</td><td align="left">参数类型有2个，为T、U，返回值为</td><td align="center">R R apply(T t, U u);</td></tr><tr><td align="center">UnaryOperator&lt; T &gt;</td><td align="left">参数为T，对参数为T的对象进行一元操作，并返回T类型结果</td><td align="center">T apply(T t);</td></tr><tr><td align="center">BinaryOperator&lt; T &gt;</td><td align="left">参数为T，对参数为T得对象进行二元操作，并返回T类型得结果</td><td align="center">T apply(T t1， T t2);</td></tr><tr><td align="center">BiConsumcr(T, U)</td><td align="left">参数为T、U，无返回值</td><td align="center">void accept(T t, U u);</td></tr><tr><td align="center">ToIntFunction&lt; T &gt;</td><td align="left">参数类型为T，返回值分别为int分别计算int得函数</td><td align="center">int applyAsInt(T value);</td></tr><tr><td align="center">ToLongFunction&lt; T &gt;</td><td align="left">参数类型为T，返回值分别为long分别计算long得函数</td><td align="center">long applyAsLong(T value);</td></tr><tr><td align="center">ToDoubleFunction&lt; T &gt;</td><td align="left">参数类型为T，返回值分别为double分别计算double得函数</td><td align="center">double applyAsDouble(T value);</td></tr><tr><td align="center">IntFunction&lt; R &gt;</td><td align="left">参数分别为int返回值为R</td><td align="center">R apply(int value);</td></tr><tr><td align="center">LongFunction&lt; R &gt;</td><td align="left">参数分别为long返回值为R</td><td align="center">R apply(long value)</td></tr><tr><td align="center">DoubleFunction&lt; R &gt;</td><td align="left">参数分别为double返回值为R</td><td align="center">R apply(double value)</td></tr></tbody></table><p><strong>方法引用：</strong><br>若Lambda体中的内容有方法已经实现了，我们可以使用方法引用（可以理解为方法引用是Lambda表达式的另外一种表现形式；</p><p><strong>主要有三种语法方式：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对象::跟实例方法名</span><br><span class="line">类::静态方法名</span><br><span class="line">类::实例方法名</span><br></pre></td></tr></table></figure><p><strong>详解：</strong><br>Lambda体中调用的方法的参数列表与返回值类型必须与函数式接口的抽象方法的参数列表和返回值类型保持一致;<br>若Lambda参数列表中的第一参数是实例方法的调用者，而第二个参数的实例方法的参数时，可以使用<code>ClassName::method;</code></p><ol><li><strong>构造器引用：</strong>&nbsp;&nbsp;<code>ClassName::New;</code></li></ol><p><strong><font color=#FF0000 >注意：</font></strong>&nbsp;需要调用的构造器的参数列表与函数式接口中的抽象方法的参数列表保持一致;<br>2. <strong>数组引用:</strong> &nbsp;&nbsp;<code>Type::new;</code></p><h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><p>Stream的操作是操作的复制的数据流，不改变原数据;</p><p><strong>三个操作步骤:</strong></p><p><strong>1. 创建Stream</strong></p><ul><li>可以通过Collection系列集合提供的stream()或parallelStream();</li><li>通过Arrays中的静态方法stream()获取数组流;</li><li>通过Stream类中的静态方法of();</li><li>通过Stream中的iterate()或generate()使用迭代的方式创建无限流; </li></ul><p><strong>2. 中间操作</strong><br>多个中间操作可以连接形成一个流水线，除非流水线触发终止操作，否则中间操作不会执行    任何处理！而是再终止操作时一次性全部处理掉，称为“惰性求值”;   </p><p><strong><font color=#708090>筛选与切片：</font></strong></p><ul><li>filter: 接收Lambda,从流中排除某些元素;</li><li>limit: 阶段流，使其元素不超过给定数量;</li><li>skip(n)：跳过元素，返回一个扔掉前面n个元素的流，若流中元素不足n个，则返回一个空流。与limit(n)互补;</li><li>distinct: 筛选，通过流所生成元素的hashCode()和equals()去除重复元素;  </li></ul><p><strong><font color=#708090>映射：</font></strong></p><ul><li>map: 接收Lambda，将元素转换成其他形式或提取信息，接收一个函数作为参数，该参数会被应用到每个元素上，并将其映射成一个新元素;</li><li>flatMap: 接收一个函数作为参数，将流中的每一个值都换成另一个流，然后把所有的流连接成一个流;</li></ul><p><strong><font color=#708090>排序：</font></strong>   </p><ul><li>sorted() 自然排序 按照Comparable中的compareTo 方法进行排序</li><li>sorted(Comparator com) 定制排序</li></ul><p><strong>3.  终止操作（终端操作）</strong><br>查找与匹配：</p><ul><li>allMatch 检查是否匹配所有元素</li><li>anyMatch 检查是否至少匹配一个元素</li><li>noneMatch 检查是否没有匹配所有元素</li><li>findFirst 返回第一个元素</li><li>findAny 返回当前流中的任意元素</li><li>count 返回流中的元素总个数</li><li>max 返回流中的最大值</li><li>min 返回流中的最小值</li></ul><p><strong><font color=#FF0000 >注意：</font></strong><br>使用stream获取流进行查找默认采用串行，parallelStream是并行查找,可以声明性的通过paraller()与sequential()进行切换并行流和顺序流;</p><h3 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h3><p>Optional(java.util.Optional) 是一个容器类，代表一个值存在或者不存在，原来null表示一个值不存在，现在Optional可以更好的表达这个概念，并且可以避免空指针异常;</p><p><strong>常用方法：</strong></p><ul><li>Optional.of(T t) 创建一个Optional实例;</li><li>Optional.empty() 创建一个空的Optional;</li><li>Optional.ofNullable(T t) 若t不为null，创建Optional实例,否则创建一个空实例;</li><li>ifPresent() 判断是否包含值;</li><li>orElse(T t) 如果调用对象包含值，返回该值，否则返回t;</li><li>orElseGet(Supplier s) 如果调用对象包含值返回该值，否则返回s获取的值;</li><li>map(Function f) 如果有值对齐处理，并返回处理后的Optional，否则返回Optional.empty();</li><li>flatMap(Function mapper) 与map类似，要求返回的值必须是Optional;</li></ul><h3 id="新的时间日期API"><a href="#新的时间日期API" class="headerlink" title="新的时间日期API"></a>新的时间日期API</h3><p>LocalDate 日期、LocalTime 时间、LocalDateTime 日期和时间 是属于不可变的对象，使用的是国际化的ISO-8601日历系统可以通过.now()方法获取当前时间或用of(年，月，日，时，分，秒)获取参数给定的时间;</p><ul><li>Instant: 时间戳 now()获取默认是UTC时区;</li><li>Duration: 计算两个时间之间的间隔、period：计算两个日期之间的间隔</li><li>TemporalAdjuster: 时间校正器。如将日期调整到下周等操作。TemporalAdjusters 类提供了大量的TemporalAdjuster的实现;</li><li>DateTimeFormatter: 该类提供了日期格式化的一些常量,也可以使用该类的ofPattern(String)进行自定义;</li><li>ZonedDate、ZonedTime、ZonedDateTime 带时区的时间，ZoneId类中包含了所有的时区信息，getAvailableZoneIds() 可以获取所有时区信息，of(id) 指定时区信息获取ZoneId对象;</li></ul><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime ldt = LocalDateTime.now(ZoneId.of(&quot;Asia/Shanghai&quot;));//获取上海时区的时间;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java语言、编译器、类库、开发工具与JVM（Java虚拟机）带来了大量新特性。这些特性将颠覆以往的写代码习惯，简化开发量。&lt;/p&gt;
&lt;h3 id=&quot;Lambda表达式&quot;&gt;&lt;a href=&quot;#Lambda表达式&quot; class=&quot;headerlink&quot; title=&quot;Lamb
      
    
    </summary>
    
    
    
      <category term="Java" scheme="https://jinqiansheng.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
